<?php

/**
 * @file
 * Provides integration of the jQuery DataTables plugin
 */

/**
 * Implements hook_theme().
 */
function datatables_theme() {
  return array(
    'datatable' => array(
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'attributes' => NULL,
        'caption' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_library().
 */
function datatables_library() {
  $libraries = array();

  $lib_path = _datatables_get_path();

  // Make sure we have a valid library path before returning library load info.
  if (!empty($lib_path)) {
    $version = _datatables_get_version();

    $js_file = _datatables_is_new_version() ? 'datatables_1_10.js' : 'datatables.js';

    $libraries['datatables'] = array(
      'title' => 'DataTables',
      'website' => 'http://http://datatables.net/',
      'version' => $version,
      'js' => array(
        $lib_path . '/media/js/jquery.dataTables.js' => array(),
        drupal_get_path('module', 'datatables') . '/js/' . $js_file => array(),
      ),
      'css' => array(
        $lib_path . '/media/css/demo_table.css' => array(),
      ),
    );

    // Do not create library definition if not applicable to version.
    if (!_datatables_is_new_version()) {
      $tt_sub = _datatables_is_new_version() ? '/tabletools' : '/extras/TableTools/media';
      $libraries['datatables-tabletools'] = array(
        'title' => 'Tabletools plugin for DataTables',
        'website' => 'http://www.datatables.net/extras/tabletools/',
        'version' => '1.1.4',
        'js' => array(
          $lib_path . $tt_sub . '/extras/TableTools/media/js/TableTools.js' => array(),
          $lib_path . $tt_sub . '/js/ZeroClipboard.js' => array(),
        ),
        'css' => array(
          $lib_path . $tt_sub . '/extras/TableTools/media/css/TableTools.css' => array(),
        ),
        'dependencies' => array(
          array('datatables', 'datatables'),
        ),
      );
    }
    else {
      // Bootstrap.
      $libraries['datatables-bootstrap'] = array(
        'title' => 'Bootstrap plugin for DataTables',
        'website' => 'https://cdn.datatables.net//',
        'version' => '1.10.8',
        'js' => array(
          $lib_path . '/bootstrap/dataTables.bootstrap.min.js' => array(),
        ),
        'css' => array(
          $lib_path . '/bootstrap/dataTables.bootstrap.min.css' => array(),
        ),
        'dependencies' => array(
          array('datatables', 'datatables'),
        ),
      );
      // Extensions - variablized for brevity.
      $extensions = array(
        'responsive' => array(
          'version' => '1.0.7',
          'label' => 'Responsive',
          'js' => array('/responsive/dataTables.responsive.min.js'),
          'css' => array('/responsive/responsive.dataTables.min.css'),
        ),
        'responsive-bootstrap' => array(
          'version' => '1.0.7',
          'label' => 'Responsive Bootstrap',
          'js' => array('/responsive/dataTables.responsive.min.js'),
          'css' => array('/responsive/responsive.bootstrap.min.css'),
        ),
        'buttons' => array(
          'version' => '1.0.0',
          'label' => 'Buttons',
          'js' => array('/buttons/dataTables.buttons.min.js'),
          'css' => array('/button/buttons.dataTables.min.css'),
        ),
        'buttons-bootstrap' => array(
          'version' => '1.0.0',
          'label' => 'Buttons Bootstrap',
          'js' => array(
            '/buttons/dataTables.buttons.min.js',
            '/buttons/buttons.bootstrap.min.js'
          ),
          'css' => array('/buttons/buttons.bootstrap.min.css'),
        ),
        'select' => array(
          'version' => '1.0.0',
          'label' => 'Select',
          'js' => array('/select/dataTables.select.min.js'),
          'css' => array('/select/select.dataTables.min.css'),
        ),
        'select-bootstrap' => array(
          'version' => '1.0.0',
          'label' => 'Select Bootstrap',
          'js' => array('/select/dataTables.select.min.js'),
          'css' => array('/select/select.bootstrap.min.css'),
        ),
      );
      // Create the definitions for the above
      // Note: each library is prefixed with 'datatables-'.
      foreach ($extensions as $key => $value) {
        // Quickly ix JS/CSS values.
        $js = array();
        foreach ($value['js'] as $index => $file) {
          $js[$lib_path . '/extensions' . $file] = array();
        }
        $css = array();
        foreach($value['css'] as $file) {
          $css[$lib_path . '/extensions' . $file] = array();
        }
        // Create the libraries definition.
        $libraries['datatables-' . $key] = array(
          'title' => $value['label'] . ' Extension for DataTables',
          'website' => 'https://cdn.datatables.net//',
          'version' => $value['version'],
          'js' => $js,
          'css' => $css,
          'dependencies' => array(
            array('datatables', 'datatables'),
          ),
        );
      }
    }
  }

  return $libraries;
}

/**
 * Implements hook_views_api().
 */
function datatables_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'datatables') . '/views',
  );
}

/**
 * Return a themed DataTable.
 *
 * This function takes the same parameters as theme_table, but also allows the
 * inclusion of DataTable specific information in the $header and $attributes
 * parameters in order to configure a DataTable.  If an id is not set in the
 * $attributes paramater, a unique one is generated.
 *
 * To set features and options for the DataTable, add
 * $parameters['datatable_options'] as an associative array.
 * For example:
 * @code
 *   $parameters['datatables_options'] = array(
 *     'bFilter'   => FALSE,  // Disable filtering of data.
 *     'bInfo'     => TRUE,   // Show the table information display.
 *     'aaSorting' => array(  // Sort by 3rd column first, and then 4th column.
 *        array(2, 'asc'),
 *        array(3, 'desc'),
 *      ),
 *   );
 * @endcode
 * See http://datatables.net/usage/features and
 * http://datatables.net/usage/options for a full list of features and options.
 *
 * To enable column specific options, set the datatable_options for each of the
 * columns in the $header parameter.
 * For example:
 * @code
 *   $header = array(
 *     array(
 *       'data' => t('Column 1'),
 *       'datatable_options' => array(
 *        'bSortable' => TRUE,  // Enable sorting on this column.
 *       ),
 *     ),
 *     array(
 *       'data' => t('Column 2'),
 *       'datatable_options' => array(
 *         'bSearchable' => FALSE, // Disable filtering on this column.
 *       ),
 *     ),
 *   );
 * @endcode
 * Note: if the aaColumns option is enabled in $parameters['datatable_options'],
 * then all datatable_options in the $header parameter will be ignored, since
 * the parameters will override column options.  See
 * http://datatables.net/usage/columns for a full list of column options.
 *
 * @param array $variables
 *   An associative array containing:
 *   - header: An array containing the table headers. Each element of the array
 *     can be either a localized string or an associative array with the
 *     following keys:
 *     - "data": The localized title of the table column.
 *     - "field": The database field represented in the table column (required
 *       if user is to be able to sort on this column).
 *     - "sort": A default sort order for this column ("asc" or "desc").
 *     - Any HTML attributes, such as "colspan", to apply to the column header
 *       cell.
 *     - "datatable_options": An associative array containing DataTable column
 *       specific features/options.
 *   - rows: An array of table rows. Every row is an array of cells, or an
 *     associative array with the following keys:
 *     - "data": an array of cells
 *     - Any HTML attributes, such as "class", to apply to the table row.
 *     - "no_striping": a boolean indicating that the row should receive no
 *       'even / odd' styling. Defaults to FALSE.
 *     Each cell can be either a string or an associative array with the
 *     following keys:
 *     - "data": The string to display in the table cell.
 *     - "header": Indicates this cell is a header.
 *     - Any HTML attributes, such as "colspan", to apply to the table cell.
 *     Here's an example for $rows:
 *     @code
 *     $rows = array(
 *       // Simple row
 *       array(
 *         'Cell 1', 'Cell 2', 'Cell 3'
 *       ),
 *       // Row with attributes on the row and some of its cells.
 *       array(
 *         'data' => array('Cell 1', array('data' => 'Cell 2', 'colspan' => 2)),
 *         'class' => array('funky')
 *       )
 *     );
 *     @endcode
 *   - attributes: An array of HTML attributes to apply to the table tag.
 *   - caption: A localized string to use for the <caption> tag.
 *   - colgroups: An array of column groups. Each element of the array can be
 *     either:
 *     - An array of columns, each of which is an associative array of HTML
 *       attributes applied to the COL element.
 *     - An array of attributes applied to the COLGROUP element, which must
 *       include a "data" attribute. To add attributes to COL elements, set the
 *       "data" attribute with an array of columns, each of which is an
 *       associative array of HTML attributes.
 *     Here's an example for $colgroup:
 *     @code
 *     $colgroup = array(
 *       // COLGROUP with one COL element.
 *       array(
 *         array(
 *           'class' => array('funky'), // Attribute for the COL element.
 *         ),
 *       ),
 *       // Colgroup with attributes and inner COL elements.
 *       array(
 *         'data' => array(
 *           array(
 *             'class' => array('funky'), // Attribute for the COL element.
 *           ),
 *         ),
 *         'class' => array('jazzy'), // Attribute for the COLGROUP element.
 *       ),
 *     );
 *     @endcode
 *     These optional tags are used to group and set properties on columns
 *     within a table. For example, one may easily group three columns and
 *     apply same background style to all.
 *   - sticky: Use a "sticky" table header.
 *   - empty: The message to display in an extra row if table does not have any
 *     rows.
 *  - attributes: An array of HTML attributes to apply to the table tag.  If the
 *   datatable_options is set, then those options are passed to the dataTable
 *   constructor.
 *  - caption: A localized string to use for the <caption> tag.
 *
 * @return string
 *   An HTML string representing the table.
 * @see theme_table()
 */
function theme_datatable($variables) {
  $header =& $variables['header'];
  $attributes =& $variables['attributes'];
  $attributes['width'] = '100%';

  if (isset($variables['rows'])) {
    $datatable_options = !empty($attributes['datatable_options']) ? $attributes['datatable_options'] : array();

    // Column settings can either be set with the global options
    // or in each header definition.
    if (!isset($datatable_options['aoColumns'])) {
      foreach ($header as $key => $cell) {
        if (isset($cell['datatable_options'])) {
          $datatable_options['aoColumns'][] = $cell['datatable_options'];
          if (is_array($header[$key])) {
            unset($header[$key]['datatable_options']);
          }
        }
      }
    }

    // Set unique id.
    if (!isset($attributes['id'])) {
      $attributes['id'] = _datatables_get_id();
    }

    drupal_add_library('datatables', 'datatables');
    drupal_add_js(array('datatables' => array('#' . $attributes['id'] => $datatable_options)), 'setting');
    unset($attributes['datatable_options']);
  }

  return theme('table', $variables);
}

/**
 * Display a view as a DataTable style.
 */
function template_preprocess_datatables_view(&$vars) {
  // Run views table preprocess function to handle putting rows in columns,
  // classes, etc.
  template_preprocess_views_view_table($vars);

  // No need to add anything if there are no rows.
  if (!$vars['rows']) {
    return;
  }

  $view     = $vars['view'];

  $options  = $view->style_plugin->options;
  $handler  = $view->style_plugin;

  $fields   = &$view->field;
  $columns  = $handler->sanitize_columns($options['columns'], $fields);

  $position = 0;
  foreach ($columns as $field => $column) {
    $column_options = NULL;
    // We need the column names for 1.10+.
    if (_datatables_is_new_version()) {
      $column_options['name'] = $field;
    }


    if (isset($options['hidden_columns'][$field])) {
      switch ($options['hidden_columns'][$field]) {
        case 'expandable':
          $datatable_options['bExpandable'] = TRUE;
        // ... and fall through, since expandable columns are also hidden.
        case 'hidden':
          // Hidden or expandable columns get the bVisible init option set to
          // false.
          $column_options['bVisible'] = FALSE;
      }
    }

    // Render the header labels.
    if ($field == $column && empty($fields[$field]->options['exclude'])) {
      // Overrides clicksort head defined in
      // template_preprocess_views_view_table().
      $vars['header'][$field] = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');

      if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
        $column_options['bSortable'] = FALSE;
      }
      else {
        // Attempt to autodetect the type of field in order to handle sorting
        // correctly.
        if (drupal_strlen($fields[$field]->last_render) != drupal_strlen(strip_tags($fields[$field]->last_render))) {
          $column_options['sType'] = 'html';
        }
        elseif (is_numeric($fields[$field]->last_render)) {
          $column_options['sType'] = 'numeric';
        }
        elseif ($fields[$field] instanceof views_handler_field_date) {
          $column_options['sType'] = 'date';
        }
        // Store default sort order.
        if (isset($options['info'][$field]['default_sort_order'])) {
          $column_options['default_sort_order'] = $options['info'][$field]['default_sort_order'];
        }
        $column_options['bSortable'] = TRUE;
      }
      $datatable_options['aoColumns'][] = $column_options;
      $datatable_options['aoColumnHeaders'][] = $vars['header'][$field];
    }

    // Set default sort order.
    // but dont reset each time.
    // $datatable_options['aaSorting'] = array();
    if ($options['default'] == $field) {
      $datatable_options['aaSorting'] = array(array($position, $options['order']));
    }

    $position++;
  }

  // Enable table info display, if necessary.
  $datatable_options['bInfo'] = $options['elements']['table_info'];
  $datatable_options['bFilter'] = $options['elements']['search_box'];
  $datatable_options['bStateSave'] = $options['elements']['save_state'];

  $datatable_options['bLengthChange'] = $options['pages']['length_change'];
  $datatable_options['iDisplayLength'] = (int) $options['pages']['display_length'];

  // Enable ThemeRoller support, if necessary.
  if ($options['layout']['themeroller']) {
    $datatable_options['bJQueryUI'] = TRUE;
  }

  // Pass the sDOM parameter, if one is specified.
  if ($options['layout']['sdom']) {
    $datatable_options['sDom'] = $options['layout']['sdom'];
  }

  $datatable_options['bAutoWidth'] = $options['layout']['autowidth'];

  // Enable full_numbers pagination if selected.
  switch ($options['pages']['pagination_style']) {
    case 'full_numbers':
      $datatable_options['sPaginationType'] = 'full_numbers';
      break;

    case 'no_pagination':
      $datatable_options['bPaginate'] = FALSE;
      break;

    default:
      // Do nothing. No parameters need to be sent for the default (two-button)
      // style.
      break;
  }

  // Enable TableTools plugin support, if necessary.
  if ($options['elements']['table_tools']) {
    $datatable_options['oTableTools'] = array(
      'sSwfPath' => base_path() . _datatables_get_path() . '/extras/TableTools/media/swf/copy_csv_xls_pdf.swf',
    );

    // If a custom sDom is passed, assume that "T" is added, otherwise add it
    // manually.
    if (!$options['layout']['sdom']) {
      $datatable_options['sDom'] = 'T<"clear">lfrtip';
    }

    drupal_add_library('datatables', 'datatables-tabletools');
  }

  $datatable_options['oLanguage'] = array(
    'sEmptyTable' => t('No data available in table'),
    'sInfo' => t('Start !_START_ to !_END_ of !_TOTAL_ entries', array('!_START_' => '_START_', '!_END_' => '_END_', '!_TOTAL_' => '_TOTAL_')),
    'sInfoEmpty' => t('Showing 0 to 0 of 0 entries'),
    'sInfoFiltered' => t('(filtered from !_MAX_ total entries)', array('!_MAX_' => '_MAX_')),
    'sInfoPostFix' => '',
    'sProcessing' => t('Processing...'),
    'sLengthMenu' => t('Show !_MENU_ entries', array('!_MENU_' => '_MENU_')),
    'sLoadingRecords' => t('Loading...'),
    'sZeroRecords' => t( 'No matching records found'),
    'sSearch' => t('Search'),
    'oPaginate' => array(
      'sFirst' => t( 'First'),
      'sPrevious' => t('Previous'),
      'sNext' => t('Next'),
      'sLast' => t('Last'),
    ),
    'oAria' => array(
      'sSortAscending' => t(': activate to sort column ascending'),
      'sSortDescending' => t(': activate to sort column descending'),
    ),
  );

  $vars['id'] = _datatables_get_id();
  $vars['classes_array'][] = 'display';

  // Is this DataTables 1.10? Then remap the settings.
  if (_datatables_is_new_version()) {

    // Remap the settings for DataTables 1.10.
    $datatable_options = _datatables_settings_1_10($datatable_options);

    // Allow for new features, such as JSON caching.
    if (isset($options['advanced'])) {
      // JSON source and deferRender.
      if (isset($options['advanced']['json_source_enabled']) && $options['advanced']['json_source_enabled'] == '1') {
        // Set recordsTotal.
        $datatable_options['recordsTotal'] = count($vars['rows']);
        // Generate the JSON file.
        $json_file = _datatables_defer_loading_json($vars['rows'], $view);
        $url = file_create_url($json_file);
        // Set the ajax url to json and dataSrc to flat.
        $datatable_options['ajax'] = array(
          'url' => $url,
          'dataSrc' => 'data',
          'cache' => TRUE,
        );
        // JSON source implies deferRender.
        $datatable_options['deferRender'] = TRUE;
        // Only print the rows for the default pagination.
        $new_render_rows = array_slice($vars['rows'], 0, $options['pages']['display_length']);
        $vars['rows'] = $new_render_rows;

        // Set deferLoading as we've printed out some items already.
        $display_length = (int) $options['pages']['display_length'];
        // DeferLoading cannot work without JSON Source.
        // @TODO In order for this to work, we either use Views processing (nah).
        // @TODO Or we learn how to return from localstorage (better).
        if (isset($options['advanced']['defer_loading_enabled']) && $options['advanced']['defer_loading_enabled'] == '1') {
          /*
           * I don't know what to set if we're overriding the whole ajax function!
           * I know deferLoading merges DOM and JSON data. It also sends a
           * request for each draw. A standard GET fails so you need to override
           * sending request using ajax.data(). The trick is in ajaxSrc, the
           * return data, however ajaxSrc doesn't apply filters or sort
           * anything due to expected server processing.
           * Disabled for now.
           */
          $datatable_options['serverSide'] = FALSE;

          // Depending on serverSide config, deferLoading works differently.
          if ($datatable_options['serverSide']) {
            $datatable_options['deferLoading'] = $view->total_rows;
          }
          else {
            $datatable_options['deferLoading'] = array(
              $display_length,
              (int) $view->total_rows
            );
          }
          // Records filtered.
          $datatable_options['recordsFiltered'] = $display_length;
        }

        // Bootstrap integration.
        // @todo check plugin exists?!
        if (isset($options['advanced']['bootstrap']) && $options['advanced']['bootstrap'] == '1') {
          drupal_add_library('datatables', 'datatables-bootstrap');
          $datatable_options['bootstrap'] = TRUE;
        }
        // Extensions, soo many extensions.
        if (isset($options['advanced']['extensions'])) {
          $extensions = $options['advanced']['extensions'];
          if ($extensions['responsive'] == '1') {
            !empty($datatable_options['bootstrap'])
              ? drupal_add_library('datatables', 'datatables-responsive-bootstrap')
              : drupal_add_library('datatables', 'datatables-responsive');
            $datatable_options['responsive'] = TRUE;
            $datatable_options['autoWidth '] = FALSE;
          }
          if ($extensions['buttons'] == '1') {
            !empty($datatable_options['bootstrap'])
              ? drupal_add_library('datatables', 'datatables-buttons-bootstrap')
              : drupal_add_library('datatables', 'datatables-buttons');
            $datatable_options['buttons'] = array(
              'copy',
              'csv',
              'excel',
              'pdf'
            );
            if($datatable_options['dom'] && strpos($datatable_options['dom'], 'B') === FALSE) {
              $datatable_options['dom'] = 'B' . $datatable_options['dom'];
            }
          }
          if ($extensions['select'] == '1') {
            !empty($datatable_options['bootstrap'])
              ? drupal_add_library('datatables', 'datatables-select-bootstrap')
              : drupal_add_library('datatables', 'datatables-select');
            $datatable_options['select '] = TRUE;
          }
        }
      }
    }
  }

  dpm($datatable_options, 'FINAL $datatable_options');
  #dpm(drupal_json_encode($datatable_options), 'FINAL datatable_options JSON');

  // Add DataTables and associated libraries.
  drupal_add_library('datatables', 'datatables');
  // Add our settings for our DataTable initialization JS to pick up.
  drupal_add_js(array('datatables' => array('#' . $vars['id'] => $datatable_options)), array('type' => 'setting', 'scope' => JS_DEFAULT));
}

/**
 * JSON encodes the rendered rows for use as an MD5 filename.
 *   Static-ized for performance.
 * @param $rows
 * @return mixed
 */
function _datatables_json_encode_rows($rows) {
  $json = &drupal_static(__FUNCTION__);
  if (!isset($json) && !empty($rows)) {
    $json = drupal_json_encode($rows);
  }
  return $json;
}

/**
 * Creates a JSON encoded file for download by the client
 * @param $rows
 *    The rendered rows from theme_table variables.
 * @param $view
 *    The associated view, used for unique filename creation.
 * @return bool|string
 *    Returns the full uri of the JSON file.
 */
function _datatables_defer_loading_json($rows, $view)  {
  $uri = FALSE;
  // Apparently json_encode is faster than serialize(), and we are json'ing
  // anyway so lets do that.
  $data = new stdClass();
  $data->data = $rows;
  $json = _datatables_json_encode_rows($data);
  $keys = array(
    $view->name,
    $view->current_display,
    // Perform 'md5' on the rows for brevity.. its still unique.
    md5($json),
  );
  // Create unique filename from above variables.
  $filename = md5(drupal_json_encode($keys)) . '.json';

  // Prepare directory for saving file data.
  $dir = 'public://datatables_json';
  if (file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $uri = $dir . '/' . $filename;
    file_save_data($json, $uri);
  }
  return $uri;
}

/**
 * Remaps the Datatables 1.9 settings to 1.10.
 *
 * @param array $options
 *    Old Datatable options for 1.9 to be remapped.
 * @return array $options
 *    New DataTable options for 1.10.
 */
function _datatables_settings_1_10($options) {
  // Save original options for later.
  //dpm($options, 'OLD');
  $old_options = $options;

  $columns = array();
  foreach($old_options['aoColumns'] AS $index => $option) {
    $columns[$index]['targets'] = 'views-field-' . $option['name']; //$index
    $columns[$index]['data'] = $option['name'];
    $columns[$index]['visible'] = isset($option['bVisible']) ? FALSE : TRUE;
    if (isset($option['bSortable'])) {
      $columns[$index]['orderable'] = TRUE;
      // If sortable, add type
      // Get the column type if it exists.
      if (isset($option['sType'])) {
        switch ($option['sType']) {
          case 'html':
            $columns[$index]['type'] = 'html';
            break;
          case 'numeric':
            $columns[$index]['type'] = 'num';
            break;
          case 'date':
            $columns[$index]['type'] = 'date';
            break;
        }
      }
    }

    // Provide coluimn name for object index.
    $columns[$index]['name'] = $option['name'];

    // Get the default sort order.
    if (isset($option['default_sort_order'])) {
      $columns[$index]['orderSequence'] = array($option['default_sort_order']);
    }
  }

  // New DataTable 1.10 settings.
  $options = array(
    //'columnDefs' => $columns,
    'columns' => $columns,
    //'ordering' => $sortable, // methinks this is global.
    'expandable' => isset($old_options['bExpandable']) ? $old_options['bExpandable'] : FALSE,
    'info' => isset($old_options['bInfo']) ? $old_options['bInfo'] : FALSE,
    'searching' => isset($old_options['bFilter']) ? $old_options['bFilter'] : FALSE,
    'stateSave' => isset($old_options['bStateSave']) ? $old_options['bStateSave'] : FALSE,
    'lengthChange' => isset($old_options['bLengthChange']) ? $old_options['bLengthChange'] : TRUE,
    'dom' => isset($old_options['sDom']) && !empty($old_options['sDom']) ? $old_options['sDom'] : 'T<"clear">lfrtip',
    'autoWidth' => isset($old_options['bAutoWidth']) ? $old_options['bAutoWidth'] : FALSE,
    // Use the new language variables.
    'language' => array(
      "lengthMenu" => "Display _MENU_ records per page",
      "zeroRecords" => "Nothing found - sorry",
      "info" => "Showing _START_ to _END_ of _TOTAL_ entries - Page _PAGE_ of _PAGES_",
      "infoEmpty" => "No records available",
      "infoFiltered" => "(filtered from _MAX_ total records)"
    ),
  );

  // If bJQueryUI exists.
  if(isset($old_options['bJQueryUI'])) {
    $options['jQueryUI'] = $old_options['bJQueryUI'];
  }
  // Display length, might get changed later.
  if(isset($old_options['iDisplayLength']))  {
    $options['pageLength'] = $old_options['iDisplayLength'];
  }
  // Option lengthChange is set by default so supply some lengths.
  // @TODO Allow overrides in settings.
  $options['lengthMenu'] = array(
    array(
      10, 25, 50, 100, -1,
    ),
    array(
      10, 25, 50, 100, "All",
    ),
  );

  return $options;
}

/**
 * Returns an unique DataTable id
 */
function _datatables_get_id() {
  static $datatable_id;
  return 'datatable-' . ++$datatable_id;
}

/**
 * Returns path to datatables library.
 */
function _datatables_get_path() {
  $lib_path = NULL;
  if (module_exists('libraries') && file_exists(libraries_get_path('datatables') . '/media/js/jquery.dataTables.js')) {
    $lib_path = libraries_get_path('datatables');
  }
  elseif (file_exists(drupal_get_path('module', 'datatables') . '/dataTables/media/js/jquery.dataTables.js')) {
    $lib_path = drupal_get_path('module', 'datatables') . '/dataTables';
  }

  return $lib_path;
}

/**
 * Gets the version of datatables javascript file from docblock comments.
 * @return array|bool
 */
function _datatables_get_version() {
  $version = &drupal_static(__FUNCTION__);
  cache_clear_all('datatables_version', 'cache');

  if (!isset($version)) {
    if ($cache = cache_get('datatables_version')) {
      $version = $cache->data;
    }
    else {
      $file = _datatables_get_path() . '/media/js/jquery.dataTables.js';
      // Regex the version, works on production and minified files, for later.
      if ($handle = fopen($file, "r")) {
        $contents = fread($handle, 1024);
        $pattern = '/(!\sDataTables|@version)\s*([0-9]*\.[0-9]*)/';
        preg_match($pattern, $contents, $matches);
        if (!empty($matches)) {
          $version = array_pop($matches);
        }
      }
      cache_set('datatables_version', $version, 'cache');
    }
  }
  return $version;
}

/**
 * Compares the version of Datatables javascript and return true if newer than
 * 1.9.
 * @return array|bool
 */
function _datatables_is_new_version() {
  $ver = _datatables_get_version();
  if (strlen($ver) >= 4 && strpos($ver, '1.1') === 0)  {
    return TRUE;
  }
  return FALSE;
}